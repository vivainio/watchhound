name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check code
        run: cargo check --all-targets --all-features

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Run tests
        run: cargo test --all-features

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: watchhound
            asset_name: watchhound-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: watchhound.exe
            asset_name: watchhound-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: watchhound
            asset_name: watchhound-macos-x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Verify build output (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "Checking if build output exists:"
          ls -la target/${{ matrix.target }}/release/
          echo "Looking for: ${{ matrix.artifact_name }}"
          if [ -f "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" ]; then
            echo "✅ Build artifact found: ${{ matrix.artifact_name }}"
            ls -la "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}"
          else
            echo "❌ Build artifact not found: ${{ matrix.artifact_name }}"
            echo "Available files:"
            ls -la target/${{ matrix.target }}/release/
            exit 1
          fi
      
      - name: Verify build output (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Checking if build output exists:"
          Get-ChildItem "target\${{ matrix.target }}\release\" | Format-Table
          Write-Host "Looking for: ${{ matrix.artifact_name }}"
          $artifactPath = "target\${{ matrix.target }}\release\${{ matrix.artifact_name }}"
          if (Test-Path $artifactPath) {
            Write-Host "✅ Build artifact found: ${{ matrix.artifact_name }}"
            Get-ChildItem $artifactPath | Format-List
          } else {
            Write-Host "❌ Build artifact not found: ${{ matrix.artifact_name }}"
            Write-Host "Available files:"
            Get-ChildItem "target\${{ matrix.target }}\release\" | Format-Table
            exit 1
          }
      
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # Create directories
          mkdir -p upload
          mkdir -p temp-release
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} temp-release/
          
          # Create archive with OS and architecture in name
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            OS_NAME="linux"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            OS_NAME="macos"
          else
            OS_NAME="unknown"
          fi
          
          ARCH="x86_64"
          VERSION="${{ github.ref_name }}"
          if [ "$VERSION" = "" ]; then
            VERSION="dev"
          fi
          
          ARCHIVE_NAME="watchhound-${VERSION}-${OS_NAME}-${ARCH}.tar.gz"
          tar -czf "upload/${ARCHIVE_NAME}" -C temp-release .
          echo "Created archive: ${ARCHIVE_NAME}"
      
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Create directories
          New-Item -ItemType Directory -Path "upload" -Force
          New-Item -ItemType Directory -Path "temp-release" -Force
          Copy-Item "target\${{ matrix.target }}\release\${{ matrix.artifact_name }}" "temp-release\"
          
          # Create archive with OS and architecture in name
          $VERSION = "${{ github.ref_name }}"
          if ($VERSION -eq "") {
            $VERSION = "dev"
          }
          
          $ARCHIVE_NAME = "watchhound-${VERSION}-windows-x86_64.zip"
          Compress-Archive -Path "temp-release\*" -DestinationPath "upload\$ARCHIVE_NAME"
          Write-Host "Created archive: $ARCHIVE_NAME"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: upload/*.tar.gz
          if-no-files-found: error
        if: matrix.os != 'windows-latest'
      
      - name: Upload artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: upload/*.zip
          if-no-files-found: error
        if: matrix.os == 'windows-latest'

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [check, test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Verify tag
        run: |
          echo "Current ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          git tag -l
          git log --oneline -5
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: List artifacts directory
        run: |
          echo "Artifacts directory structure:"
          find ./artifacts -type f -name "*" | sort
          echo "Contents of each artifact directory:"
          for dir in ./artifacts/*/; do
            echo "Directory: $dir"
            ls -la "$dir" || echo "Directory not found or empty"
          done
          echo "Total files found:"
          find ./artifacts -type f | wc -l
      
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/watchhound-linux-x86_64/*.tar.gz
            artifacts/watchhound-windows-x86_64.exe/*.zip
            artifacts/watchhound-macos-x86_64/*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 